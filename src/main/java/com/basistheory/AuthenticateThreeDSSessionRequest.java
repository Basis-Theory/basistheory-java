/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import java.util.Objects;
import java.util.Arrays;
import com.basistheory.ThreeDSCardholderInfo;
import com.basistheory.ThreeDSMerchantInfo;
import com.basistheory.ThreeDSMessageExtension;
import com.basistheory.ThreeDSPurchaseInfo;
import com.basistheory.ThreeDSRequestorInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.basistheory.JSON;

/**
 * AuthenticateThreeDSSessionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthenticateThreeDSSessionRequest {
  public static final String SERIALIZED_NAME_AUTHENTICATION_CATEGORY = "authentication_category";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CATEGORY)
  private String authenticationCategory;

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authentication_type";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private String authenticationType;

  public static final String SERIALIZED_NAME_CHALLENGE_PREFERENCE = "challenge_preference";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_PREFERENCE)
  private String challengePreference;

  public static final String SERIALIZED_NAME_REQUEST_DECOUPLED_CHALLENGE = "request_decoupled_challenge";
  @SerializedName(SERIALIZED_NAME_REQUEST_DECOUPLED_CHALLENGE)
  private Boolean requestDecoupledChallenge;

  public static final String SERIALIZED_NAME_DECOUPLED_CHALLENGE_MAX_TIME = "decoupled_challenge_max_time";
  @SerializedName(SERIALIZED_NAME_DECOUPLED_CHALLENGE_MAX_TIME)
  private Integer decoupledChallengeMaxTime;

  public static final String SERIALIZED_NAME_PURCHASE_INFO = "purchase_info";
  @SerializedName(SERIALIZED_NAME_PURCHASE_INFO)
  private ThreeDSPurchaseInfo purchaseInfo;

  public static final String SERIALIZED_NAME_MERCHANT_INFO = "merchant_info";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INFO)
  private ThreeDSMerchantInfo merchantInfo;

  public static final String SERIALIZED_NAME_REQUESTOR_INFO = "requestor_info";
  @SerializedName(SERIALIZED_NAME_REQUESTOR_INFO)
  private ThreeDSRequestorInfo requestorInfo;

  public static final String SERIALIZED_NAME_CARDHOLDER_INFO = "cardholder_info";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_INFO)
  private ThreeDSCardholderInfo cardholderInfo;

  public static final String SERIALIZED_NAME_BROADCAST_INFO = "broadcast_info";
  @SerializedName(SERIALIZED_NAME_BROADCAST_INFO)
  private Object broadcastInfo = null;

  public static final String SERIALIZED_NAME_MESSAGE_EXTENSIONS = "message_extensions";
  @SerializedName(SERIALIZED_NAME_MESSAGE_EXTENSIONS)
  private List<ThreeDSMessageExtension> messageExtensions = null;

  public AuthenticateThreeDSSessionRequest() {
  }

  public AuthenticateThreeDSSessionRequest authenticationCategory(String authenticationCategory) {
    
    this.authenticationCategory = authenticationCategory;
    return this;
  }

   /**
   * Get authenticationCategory
   * @return authenticationCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAuthenticationCategory() {
    return authenticationCategory;
  }


  public void setAuthenticationCategory(String authenticationCategory) {
    this.authenticationCategory = authenticationCategory;
  }


  public AuthenticateThreeDSSessionRequest authenticationType(String authenticationType) {
    
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * Get authenticationType
   * @return authenticationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAuthenticationType() {
    return authenticationType;
  }


  public void setAuthenticationType(String authenticationType) {
    this.authenticationType = authenticationType;
  }


  public AuthenticateThreeDSSessionRequest challengePreference(String challengePreference) {
    
    this.challengePreference = challengePreference;
    return this;
  }

   /**
   * Get challengePreference
   * @return challengePreference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChallengePreference() {
    return challengePreference;
  }


  public void setChallengePreference(String challengePreference) {
    this.challengePreference = challengePreference;
  }


  public AuthenticateThreeDSSessionRequest requestDecoupledChallenge(Boolean requestDecoupledChallenge) {
    
    this.requestDecoupledChallenge = requestDecoupledChallenge;
    return this;
  }

   /**
   * Get requestDecoupledChallenge
   * @return requestDecoupledChallenge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequestDecoupledChallenge() {
    return requestDecoupledChallenge;
  }


  public void setRequestDecoupledChallenge(Boolean requestDecoupledChallenge) {
    this.requestDecoupledChallenge = requestDecoupledChallenge;
  }


  public AuthenticateThreeDSSessionRequest decoupledChallengeMaxTime(Integer decoupledChallengeMaxTime) {
    
    this.decoupledChallengeMaxTime = decoupledChallengeMaxTime;
    return this;
  }

   /**
   * Get decoupledChallengeMaxTime
   * @return decoupledChallengeMaxTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDecoupledChallengeMaxTime() {
    return decoupledChallengeMaxTime;
  }


  public void setDecoupledChallengeMaxTime(Integer decoupledChallengeMaxTime) {
    this.decoupledChallengeMaxTime = decoupledChallengeMaxTime;
  }


  public AuthenticateThreeDSSessionRequest purchaseInfo(ThreeDSPurchaseInfo purchaseInfo) {
    
    this.purchaseInfo = purchaseInfo;
    return this;
  }

   /**
   * Get purchaseInfo
   * @return purchaseInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThreeDSPurchaseInfo getPurchaseInfo() {
    return purchaseInfo;
  }


  public void setPurchaseInfo(ThreeDSPurchaseInfo purchaseInfo) {
    this.purchaseInfo = purchaseInfo;
  }


  public AuthenticateThreeDSSessionRequest merchantInfo(ThreeDSMerchantInfo merchantInfo) {
    
    this.merchantInfo = merchantInfo;
    return this;
  }

   /**
   * Get merchantInfo
   * @return merchantInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThreeDSMerchantInfo getMerchantInfo() {
    return merchantInfo;
  }


  public void setMerchantInfo(ThreeDSMerchantInfo merchantInfo) {
    this.merchantInfo = merchantInfo;
  }


  public AuthenticateThreeDSSessionRequest requestorInfo(ThreeDSRequestorInfo requestorInfo) {
    
    this.requestorInfo = requestorInfo;
    return this;
  }

   /**
   * Get requestorInfo
   * @return requestorInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ThreeDSRequestorInfo getRequestorInfo() {
    return requestorInfo;
  }


  public void setRequestorInfo(ThreeDSRequestorInfo requestorInfo) {
    this.requestorInfo = requestorInfo;
  }


  public AuthenticateThreeDSSessionRequest cardholderInfo(ThreeDSCardholderInfo cardholderInfo) {
    
    this.cardholderInfo = cardholderInfo;
    return this;
  }

   /**
   * Get cardholderInfo
   * @return cardholderInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThreeDSCardholderInfo getCardholderInfo() {
    return cardholderInfo;
  }


  public void setCardholderInfo(ThreeDSCardholderInfo cardholderInfo) {
    this.cardholderInfo = cardholderInfo;
  }


  public AuthenticateThreeDSSessionRequest broadcastInfo(Object broadcastInfo) {
    
    this.broadcastInfo = broadcastInfo;
    return this;
  }

   /**
   * Get broadcastInfo
   * @return broadcastInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getBroadcastInfo() {
    return broadcastInfo;
  }


  public void setBroadcastInfo(Object broadcastInfo) {
    this.broadcastInfo = broadcastInfo;
  }


  public AuthenticateThreeDSSessionRequest messageExtensions(List<ThreeDSMessageExtension> messageExtensions) {
    
    this.messageExtensions = messageExtensions;
    return this;
  }

  public AuthenticateThreeDSSessionRequest addMessageExtensionsItem(ThreeDSMessageExtension messageExtensionsItem) {
    if (this.messageExtensions == null) {
      this.messageExtensions = new ArrayList<>();
    }
    this.messageExtensions.add(messageExtensionsItem);
    return this;
  }

   /**
   * Get messageExtensions
   * @return messageExtensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ThreeDSMessageExtension> getMessageExtensions() {
    return messageExtensions;
  }


  public void setMessageExtensions(List<ThreeDSMessageExtension> messageExtensions) {
    this.messageExtensions = messageExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticateThreeDSSessionRequest authenticateThreeDSSessionRequest = (AuthenticateThreeDSSessionRequest) o;
    return Objects.equals(this.authenticationCategory, authenticateThreeDSSessionRequest.authenticationCategory) &&
        Objects.equals(this.authenticationType, authenticateThreeDSSessionRequest.authenticationType) &&
        Objects.equals(this.challengePreference, authenticateThreeDSSessionRequest.challengePreference) &&
        Objects.equals(this.requestDecoupledChallenge, authenticateThreeDSSessionRequest.requestDecoupledChallenge) &&
        Objects.equals(this.decoupledChallengeMaxTime, authenticateThreeDSSessionRequest.decoupledChallengeMaxTime) &&
        Objects.equals(this.purchaseInfo, authenticateThreeDSSessionRequest.purchaseInfo) &&
        Objects.equals(this.merchantInfo, authenticateThreeDSSessionRequest.merchantInfo) &&
        Objects.equals(this.requestorInfo, authenticateThreeDSSessionRequest.requestorInfo) &&
        Objects.equals(this.cardholderInfo, authenticateThreeDSSessionRequest.cardholderInfo) &&
        Objects.equals(this.broadcastInfo, authenticateThreeDSSessionRequest.broadcastInfo) &&
        Objects.equals(this.messageExtensions, authenticateThreeDSSessionRequest.messageExtensions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationCategory, authenticationType, challengePreference, requestDecoupledChallenge, decoupledChallengeMaxTime, purchaseInfo, merchantInfo, requestorInfo, cardholderInfo, broadcastInfo, messageExtensions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticateThreeDSSessionRequest {\n");
    sb.append("    authenticationCategory: ").append(toIndentedString(authenticationCategory)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    challengePreference: ").append(toIndentedString(challengePreference)).append("\n");
    sb.append("    requestDecoupledChallenge: ").append(toIndentedString(requestDecoupledChallenge)).append("\n");
    sb.append("    decoupledChallengeMaxTime: ").append(toIndentedString(decoupledChallengeMaxTime)).append("\n");
    sb.append("    purchaseInfo: ").append(toIndentedString(purchaseInfo)).append("\n");
    sb.append("    merchantInfo: ").append(toIndentedString(merchantInfo)).append("\n");
    sb.append("    requestorInfo: ").append(toIndentedString(requestorInfo)).append("\n");
    sb.append("    cardholderInfo: ").append(toIndentedString(cardholderInfo)).append("\n");
    sb.append("    broadcastInfo: ").append(toIndentedString(broadcastInfo)).append("\n");
    sb.append("    messageExtensions: ").append(toIndentedString(messageExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication_category");
    openapiFields.add("authentication_type");
    openapiFields.add("challenge_preference");
    openapiFields.add("request_decoupled_challenge");
    openapiFields.add("decoupled_challenge_max_time");
    openapiFields.add("purchase_info");
    openapiFields.add("merchant_info");
    openapiFields.add("requestor_info");
    openapiFields.add("cardholder_info");
    openapiFields.add("broadcast_info");
    openapiFields.add("message_extensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentication_category");
    openapiRequiredFields.add("authentication_type");
    openapiRequiredFields.add("requestor_info");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthenticateThreeDSSessionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthenticateThreeDSSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticateThreeDSSessionRequest is not found in the empty JSON string", AuthenticateThreeDSSessionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticateThreeDSSessionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("authentication_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_category").toString()));
      }
      if (!jsonObj.get("authentication_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_type").toString()));
      }
      if ((jsonObj.get("challenge_preference") != null && !jsonObj.get("challenge_preference").isJsonNull()) && !jsonObj.get("challenge_preference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challenge_preference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challenge_preference").toString()));
      }
      // validate the optional field `purchase_info`
      if (jsonObj.get("purchase_info") != null && !jsonObj.get("purchase_info").isJsonNull()) {
        ThreeDSPurchaseInfo.validateJsonObject(jsonObj.getAsJsonObject("purchase_info"));
      }
      // validate the optional field `merchant_info`
      if (jsonObj.get("merchant_info") != null && !jsonObj.get("merchant_info").isJsonNull()) {
        ThreeDSMerchantInfo.validateJsonObject(jsonObj.getAsJsonObject("merchant_info"));
      }
      // validate the required field `requestor_info`
      ThreeDSRequestorInfo.validateJsonObject(jsonObj.getAsJsonObject("requestor_info"));
      // validate the optional field `cardholder_info`
      if (jsonObj.get("cardholder_info") != null && !jsonObj.get("cardholder_info").isJsonNull()) {
        ThreeDSCardholderInfo.validateJsonObject(jsonObj.getAsJsonObject("cardholder_info"));
      }
      if (jsonObj.get("message_extensions") != null && !jsonObj.get("message_extensions").isJsonNull()) {
        JsonArray jsonArraymessageExtensions = jsonObj.getAsJsonArray("message_extensions");
        if (jsonArraymessageExtensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("message_extensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `message_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("message_extensions").toString()));
          }

          // validate the optional field `message_extensions` (array)
          for (int i = 0; i < jsonArraymessageExtensions.size(); i++) {
            ThreeDSMessageExtension.validateJsonObject(jsonArraymessageExtensions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticateThreeDSSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticateThreeDSSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticateThreeDSSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticateThreeDSSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticateThreeDSSessionRequest>() {
           @Override
           public void write(JsonWriter out, AuthenticateThreeDSSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticateThreeDSSessionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthenticateThreeDSSessionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthenticateThreeDSSessionRequest
  * @throws IOException if the JSON string is invalid with respect to AuthenticateThreeDSSessionRequest
  */
  public static AuthenticateThreeDSSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticateThreeDSSessionRequest.class);
  }

 /**
  * Convert an instance of AuthenticateThreeDSSessionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


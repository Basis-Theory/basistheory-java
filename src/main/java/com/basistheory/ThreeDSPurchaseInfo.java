/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.basistheory.JSON;

/**
 * ThreeDSPurchaseInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ThreeDSPurchaseInfo {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EXPONENT = "exponent";
  @SerializedName(SERIALIZED_NAME_EXPONENT)
  private String exponent;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transaction_type";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_INSTALLMENT_COUNT = "installment_count";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_COUNT)
  private String installmentCount;

  public static final String SERIALIZED_NAME_RECURRING_EXPIRATION = "recurring_expiration";
  @SerializedName(SERIALIZED_NAME_RECURRING_EXPIRATION)
  private String recurringExpiration;

  public static final String SERIALIZED_NAME_RECURRING_FREQUENCY = "recurring_frequency";
  @SerializedName(SERIALIZED_NAME_RECURRING_FREQUENCY)
  private String recurringFrequency;

  public ThreeDSPurchaseInfo() {
  }

  public ThreeDSPurchaseInfo amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public ThreeDSPurchaseInfo currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ThreeDSPurchaseInfo exponent(String exponent) {
    
    this.exponent = exponent;
    return this;
  }

   /**
   * Get exponent
   * @return exponent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExponent() {
    return exponent;
  }


  public void setExponent(String exponent) {
    this.exponent = exponent;
  }


  public ThreeDSPurchaseInfo date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public ThreeDSPurchaseInfo transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public ThreeDSPurchaseInfo installmentCount(String installmentCount) {
    
    this.installmentCount = installmentCount;
    return this;
  }

   /**
   * Get installmentCount
   * @return installmentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInstallmentCount() {
    return installmentCount;
  }


  public void setInstallmentCount(String installmentCount) {
    this.installmentCount = installmentCount;
  }


  public ThreeDSPurchaseInfo recurringExpiration(String recurringExpiration) {
    
    this.recurringExpiration = recurringExpiration;
    return this;
  }

   /**
   * Get recurringExpiration
   * @return recurringExpiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecurringExpiration() {
    return recurringExpiration;
  }


  public void setRecurringExpiration(String recurringExpiration) {
    this.recurringExpiration = recurringExpiration;
  }


  public ThreeDSPurchaseInfo recurringFrequency(String recurringFrequency) {
    
    this.recurringFrequency = recurringFrequency;
    return this;
  }

   /**
   * Get recurringFrequency
   * @return recurringFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecurringFrequency() {
    return recurringFrequency;
  }


  public void setRecurringFrequency(String recurringFrequency) {
    this.recurringFrequency = recurringFrequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDSPurchaseInfo threeDSPurchaseInfo = (ThreeDSPurchaseInfo) o;
    return Objects.equals(this.amount, threeDSPurchaseInfo.amount) &&
        Objects.equals(this.currency, threeDSPurchaseInfo.currency) &&
        Objects.equals(this.exponent, threeDSPurchaseInfo.exponent) &&
        Objects.equals(this.date, threeDSPurchaseInfo.date) &&
        Objects.equals(this.transactionType, threeDSPurchaseInfo.transactionType) &&
        Objects.equals(this.installmentCount, threeDSPurchaseInfo.installmentCount) &&
        Objects.equals(this.recurringExpiration, threeDSPurchaseInfo.recurringExpiration) &&
        Objects.equals(this.recurringFrequency, threeDSPurchaseInfo.recurringFrequency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, exponent, date, transactionType, installmentCount, recurringExpiration, recurringFrequency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDSPurchaseInfo {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    exponent: ").append(toIndentedString(exponent)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    installmentCount: ").append(toIndentedString(installmentCount)).append("\n");
    sb.append("    recurringExpiration: ").append(toIndentedString(recurringExpiration)).append("\n");
    sb.append("    recurringFrequency: ").append(toIndentedString(recurringFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("exponent");
    openapiFields.add("date");
    openapiFields.add("transaction_type");
    openapiFields.add("installment_count");
    openapiFields.add("recurring_expiration");
    openapiFields.add("recurring_frequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ThreeDSPurchaseInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ThreeDSPurchaseInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDSPurchaseInfo is not found in the empty JSON string", ThreeDSPurchaseInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("exponent") != null && !jsonObj.get("exponent").isJsonNull()) && !jsonObj.get("exponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exponent").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("transaction_type") != null && !jsonObj.get("transaction_type").isJsonNull()) && !jsonObj.get("transaction_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_type").toString()));
      }
      if ((jsonObj.get("installment_count") != null && !jsonObj.get("installment_count").isJsonNull()) && !jsonObj.get("installment_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installment_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installment_count").toString()));
      }
      if ((jsonObj.get("recurring_expiration") != null && !jsonObj.get("recurring_expiration").isJsonNull()) && !jsonObj.get("recurring_expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurring_expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurring_expiration").toString()));
      }
      if ((jsonObj.get("recurring_frequency") != null && !jsonObj.get("recurring_frequency").isJsonNull()) && !jsonObj.get("recurring_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurring_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurring_frequency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDSPurchaseInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDSPurchaseInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDSPurchaseInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDSPurchaseInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDSPurchaseInfo>() {
           @Override
           public void write(JsonWriter out, ThreeDSPurchaseInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDSPurchaseInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThreeDSPurchaseInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThreeDSPurchaseInfo
  * @throws IOException if the JSON string is invalid with respect to ThreeDSPurchaseInfo
  */
  public static ThreeDSPurchaseInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDSPurchaseInfo.class);
  }

 /**
  * Convert an instance of ThreeDSPurchaseInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


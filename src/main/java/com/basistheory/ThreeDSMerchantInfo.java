/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import java.util.Objects;
import java.util.Arrays;
import com.basistheory.ThreeDSMerchantRiskInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.basistheory.JSON;

/**
 * ThreeDSMerchantInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ThreeDSMerchantInfo {
  public static final String SERIALIZED_NAME_MID = "mid";
  @SerializedName(SERIALIZED_NAME_MID)
  private String mid;

  public static final String SERIALIZED_NAME_ACQUIRER_BIN = "acquirer_bin";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_BIN)
  private String acquirerBin;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CATEGORY_CODE = "category_code";
  @SerializedName(SERIALIZED_NAME_CATEGORY_CODE)
  private String categoryCode;

  public static final String SERIALIZED_NAME_RISK_INFO = "risk_info";
  @SerializedName(SERIALIZED_NAME_RISK_INFO)
  private ThreeDSMerchantRiskInfo riskInfo;

  public ThreeDSMerchantInfo() {
  }

  public ThreeDSMerchantInfo mid(String mid) {
    
    this.mid = mid;
    return this;
  }

   /**
   * Get mid
   * @return mid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMid() {
    return mid;
  }


  public void setMid(String mid) {
    this.mid = mid;
  }


  public ThreeDSMerchantInfo acquirerBin(String acquirerBin) {
    
    this.acquirerBin = acquirerBin;
    return this;
  }

   /**
   * Get acquirerBin
   * @return acquirerBin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAcquirerBin() {
    return acquirerBin;
  }


  public void setAcquirerBin(String acquirerBin) {
    this.acquirerBin = acquirerBin;
  }


  public ThreeDSMerchantInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ThreeDSMerchantInfo countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ThreeDSMerchantInfo categoryCode(String categoryCode) {
    
    this.categoryCode = categoryCode;
    return this;
  }

   /**
   * Get categoryCode
   * @return categoryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCategoryCode() {
    return categoryCode;
  }


  public void setCategoryCode(String categoryCode) {
    this.categoryCode = categoryCode;
  }


  public ThreeDSMerchantInfo riskInfo(ThreeDSMerchantRiskInfo riskInfo) {
    
    this.riskInfo = riskInfo;
    return this;
  }

   /**
   * Get riskInfo
   * @return riskInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThreeDSMerchantRiskInfo getRiskInfo() {
    return riskInfo;
  }


  public void setRiskInfo(ThreeDSMerchantRiskInfo riskInfo) {
    this.riskInfo = riskInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDSMerchantInfo threeDSMerchantInfo = (ThreeDSMerchantInfo) o;
    return Objects.equals(this.mid, threeDSMerchantInfo.mid) &&
        Objects.equals(this.acquirerBin, threeDSMerchantInfo.acquirerBin) &&
        Objects.equals(this.name, threeDSMerchantInfo.name) &&
        Objects.equals(this.countryCode, threeDSMerchantInfo.countryCode) &&
        Objects.equals(this.categoryCode, threeDSMerchantInfo.categoryCode) &&
        Objects.equals(this.riskInfo, threeDSMerchantInfo.riskInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(mid, acquirerBin, name, countryCode, categoryCode, riskInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDSMerchantInfo {\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    acquirerBin: ").append(toIndentedString(acquirerBin)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    categoryCode: ").append(toIndentedString(categoryCode)).append("\n");
    sb.append("    riskInfo: ").append(toIndentedString(riskInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mid");
    openapiFields.add("acquirer_bin");
    openapiFields.add("name");
    openapiFields.add("country_code");
    openapiFields.add("category_code");
    openapiFields.add("risk_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ThreeDSMerchantInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ThreeDSMerchantInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDSMerchantInfo is not found in the empty JSON string", ThreeDSMerchantInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("mid") != null && !jsonObj.get("mid").isJsonNull()) && !jsonObj.get("mid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mid").toString()));
      }
      if ((jsonObj.get("acquirer_bin") != null && !jsonObj.get("acquirer_bin").isJsonNull()) && !jsonObj.get("acquirer_bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirer_bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirer_bin").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("category_code") != null && !jsonObj.get("category_code").isJsonNull()) && !jsonObj.get("category_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_code").toString()));
      }
      // validate the optional field `risk_info`
      if (jsonObj.get("risk_info") != null && !jsonObj.get("risk_info").isJsonNull()) {
        ThreeDSMerchantRiskInfo.validateJsonObject(jsonObj.getAsJsonObject("risk_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDSMerchantInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDSMerchantInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDSMerchantInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDSMerchantInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDSMerchantInfo>() {
           @Override
           public void write(JsonWriter out, ThreeDSMerchantInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDSMerchantInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThreeDSMerchantInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThreeDSMerchantInfo
  * @throws IOException if the JSON string is invalid with respect to ThreeDSMerchantInfo
  */
  public static ThreeDSMerchantInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDSMerchantInfo.class);
  }

 /**
  * Convert an instance of ThreeDSMerchantInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


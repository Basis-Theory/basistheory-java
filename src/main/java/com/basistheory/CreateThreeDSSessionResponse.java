/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.basistheory.JSON;

/**
 * CreateThreeDSSessionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateThreeDSSessionResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CARD_BRAND = "cardBrand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_METHOD_URL = "method_url";
  @SerializedName(SERIALIZED_NAME_METHOD_URL)
  private String methodUrl;

  public static final String SERIALIZED_NAME_METHOD_NOTIFICATION_URL = "method_notification_url";
  @SerializedName(SERIALIZED_NAME_METHOD_NOTIFICATION_URL)
  private String methodNotificationUrl;

  public static final String SERIALIZED_NAME_DIRECTORY_SERVER_ID = "directory_server_id";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SERVER_ID)
  private String directoryServerId;

  public static final String SERIALIZED_NAME_RECOMMENDED_VERSION = "recommended_version";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_VERSION)
  private String recommendedVersion;

  public CreateThreeDSSessionResponse() {
  }

  public CreateThreeDSSessionResponse id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public CreateThreeDSSessionResponse type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public CreateThreeDSSessionResponse cardBrand(String cardBrand) {
    
    this.cardBrand = cardBrand;
    return this;
  }

   /**
   * Get cardBrand
   * @return cardBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardBrand() {
    return cardBrand;
  }


  public void setCardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
  }


  public CreateThreeDSSessionResponse methodUrl(String methodUrl) {
    
    this.methodUrl = methodUrl;
    return this;
  }

   /**
   * Get methodUrl
   * @return methodUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMethodUrl() {
    return methodUrl;
  }


  public void setMethodUrl(String methodUrl) {
    this.methodUrl = methodUrl;
  }


  public CreateThreeDSSessionResponse methodNotificationUrl(String methodNotificationUrl) {
    
    this.methodNotificationUrl = methodNotificationUrl;
    return this;
  }

   /**
   * Get methodNotificationUrl
   * @return methodNotificationUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMethodNotificationUrl() {
    return methodNotificationUrl;
  }


  public void setMethodNotificationUrl(String methodNotificationUrl) {
    this.methodNotificationUrl = methodNotificationUrl;
  }


  public CreateThreeDSSessionResponse directoryServerId(String directoryServerId) {
    
    this.directoryServerId = directoryServerId;
    return this;
  }

   /**
   * Get directoryServerId
   * @return directoryServerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDirectoryServerId() {
    return directoryServerId;
  }


  public void setDirectoryServerId(String directoryServerId) {
    this.directoryServerId = directoryServerId;
  }


  public CreateThreeDSSessionResponse recommendedVersion(String recommendedVersion) {
    
    this.recommendedVersion = recommendedVersion;
    return this;
  }

   /**
   * Get recommendedVersion
   * @return recommendedVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecommendedVersion() {
    return recommendedVersion;
  }


  public void setRecommendedVersion(String recommendedVersion) {
    this.recommendedVersion = recommendedVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateThreeDSSessionResponse createThreeDSSessionResponse = (CreateThreeDSSessionResponse) o;
    return Objects.equals(this.id, createThreeDSSessionResponse.id) &&
        Objects.equals(this.type, createThreeDSSessionResponse.type) &&
        Objects.equals(this.cardBrand, createThreeDSSessionResponse.cardBrand) &&
        Objects.equals(this.methodUrl, createThreeDSSessionResponse.methodUrl) &&
        Objects.equals(this.methodNotificationUrl, createThreeDSSessionResponse.methodNotificationUrl) &&
        Objects.equals(this.directoryServerId, createThreeDSSessionResponse.directoryServerId) &&
        Objects.equals(this.recommendedVersion, createThreeDSSessionResponse.recommendedVersion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, cardBrand, methodUrl, methodNotificationUrl, directoryServerId, recommendedVersion);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateThreeDSSessionResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    methodUrl: ").append(toIndentedString(methodUrl)).append("\n");
    sb.append("    methodNotificationUrl: ").append(toIndentedString(methodNotificationUrl)).append("\n");
    sb.append("    directoryServerId: ").append(toIndentedString(directoryServerId)).append("\n");
    sb.append("    recommendedVersion: ").append(toIndentedString(recommendedVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("cardBrand");
    openapiFields.add("method_url");
    openapiFields.add("method_notification_url");
    openapiFields.add("directory_server_id");
    openapiFields.add("recommended_version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateThreeDSSessionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateThreeDSSessionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateThreeDSSessionResponse is not found in the empty JSON string", CreateThreeDSSessionResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("cardBrand") != null && !jsonObj.get("cardBrand").isJsonNull()) && !jsonObj.get("cardBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardBrand").toString()));
      }
      if ((jsonObj.get("method_url") != null && !jsonObj.get("method_url").isJsonNull()) && !jsonObj.get("method_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method_url").toString()));
      }
      if ((jsonObj.get("method_notification_url") != null && !jsonObj.get("method_notification_url").isJsonNull()) && !jsonObj.get("method_notification_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method_notification_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method_notification_url").toString()));
      }
      if ((jsonObj.get("directory_server_id") != null && !jsonObj.get("directory_server_id").isJsonNull()) && !jsonObj.get("directory_server_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directory_server_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directory_server_id").toString()));
      }
      if ((jsonObj.get("recommended_version") != null && !jsonObj.get("recommended_version").isJsonNull()) && !jsonObj.get("recommended_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommended_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommended_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateThreeDSSessionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateThreeDSSessionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateThreeDSSessionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateThreeDSSessionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateThreeDSSessionResponse>() {
           @Override
           public void write(JsonWriter out, CreateThreeDSSessionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateThreeDSSessionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateThreeDSSessionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateThreeDSSessionResponse
  * @throws IOException if the JSON string is invalid with respect to CreateThreeDSSessionResponse
  */
  public static CreateThreeDSSessionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateThreeDSSessionResponse.class);
  }

 /**
  * Convert an instance of CreateThreeDSSessionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


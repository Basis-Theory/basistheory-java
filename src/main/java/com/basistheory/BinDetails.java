/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import java.util.Objects;
import java.util.Arrays;
import com.basistheory.BinDetailsBank;
import com.basistheory.BinDetailsCountry;
import com.basistheory.BinDetailsProduct;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.basistheory.JSON;

/**
 * BinDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BinDetails {
  public static final String SERIALIZED_NAME_CARD_BRAND = "card_brand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PREPAID = "prepaid";
  @SerializedName(SERIALIZED_NAME_PREPAID)
  private Boolean prepaid;

  public static final String SERIALIZED_NAME_CARD_SEGMENT_TYPE = "card_segment_type";
  @SerializedName(SERIALIZED_NAME_CARD_SEGMENT_TYPE)
  private String cardSegmentType;

  public static final String SERIALIZED_NAME_BANK = "bank";
  @SerializedName(SERIALIZED_NAME_BANK)
  private BinDetailsBank bank;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private BinDetailsProduct product;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private BinDetailsCountry country;

  public static final String SERIALIZED_NAME_RELOADABLE = "reloadable";
  @SerializedName(SERIALIZED_NAME_RELOADABLE)
  private Boolean reloadable;

  public static final String SERIALIZED_NAME_PAN_OR_TOKEN = "pan_or_token";
  @SerializedName(SERIALIZED_NAME_PAN_OR_TOKEN)
  private String panOrToken;

  public static final String SERIALIZED_NAME_ACCOUNT_UPDATER = "account_updater";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_UPDATER)
  private Boolean accountUpdater;

  public static final String SERIALIZED_NAME_ALM = "alm";
  @SerializedName(SERIALIZED_NAME_ALM)
  private Boolean alm;

  public static final String SERIALIZED_NAME_DOMESTIC_ONLY = "domestic_only";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_ONLY)
  private Boolean domesticOnly;

  public static final String SERIALIZED_NAME_GAMBLING_BLOCKED = "gambling_blocked";
  @SerializedName(SERIALIZED_NAME_GAMBLING_BLOCKED)
  private Boolean gamblingBlocked;

  public static final String SERIALIZED_NAME_LEVEL2 = "level2";
  @SerializedName(SERIALIZED_NAME_LEVEL2)
  private Boolean level2;

  public static final String SERIALIZED_NAME_LEVEL3 = "level3";
  @SerializedName(SERIALIZED_NAME_LEVEL3)
  private Boolean level3;

  public static final String SERIALIZED_NAME_ISSUER_CURRENCY = "issuer_currency";
  @SerializedName(SERIALIZED_NAME_ISSUER_CURRENCY)
  private String issuerCurrency;

  public static final String SERIALIZED_NAME_COMBO_CARD = "combo_card";
  @SerializedName(SERIALIZED_NAME_COMBO_CARD)
  private String comboCard;

  public static final String SERIALIZED_NAME_BIN_LENGTH = "bin_length";
  @SerializedName(SERIALIZED_NAME_BIN_LENGTH)
  private Integer binLength;

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private Object authentication = null;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Object cost = null;

  public BinDetails() {
  }

  public BinDetails cardBrand(String cardBrand) {
    
    this.cardBrand = cardBrand;
    return this;
  }

   /**
   * Get cardBrand
   * @return cardBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardBrand() {
    return cardBrand;
  }


  public void setCardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
  }


  public BinDetails type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public BinDetails prepaid(Boolean prepaid) {
    
    this.prepaid = prepaid;
    return this;
  }

   /**
   * Get prepaid
   * @return prepaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPrepaid() {
    return prepaid;
  }


  public void setPrepaid(Boolean prepaid) {
    this.prepaid = prepaid;
  }


  public BinDetails cardSegmentType(String cardSegmentType) {
    
    this.cardSegmentType = cardSegmentType;
    return this;
  }

   /**
   * Get cardSegmentType
   * @return cardSegmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardSegmentType() {
    return cardSegmentType;
  }


  public void setCardSegmentType(String cardSegmentType) {
    this.cardSegmentType = cardSegmentType;
  }


  public BinDetails bank(BinDetailsBank bank) {
    
    this.bank = bank;
    return this;
  }

   /**
   * Get bank
   * @return bank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BinDetailsBank getBank() {
    return bank;
  }


  public void setBank(BinDetailsBank bank) {
    this.bank = bank;
  }


  public BinDetails product(BinDetailsProduct product) {
    
    this.product = product;
    return this;
  }

   /**
   * Get product
   * @return product
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BinDetailsProduct getProduct() {
    return product;
  }


  public void setProduct(BinDetailsProduct product) {
    this.product = product;
  }


  public BinDetails country(BinDetailsCountry country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BinDetailsCountry getCountry() {
    return country;
  }


  public void setCountry(BinDetailsCountry country) {
    this.country = country;
  }


  public BinDetails reloadable(Boolean reloadable) {
    
    this.reloadable = reloadable;
    return this;
  }

   /**
   * Get reloadable
   * @return reloadable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReloadable() {
    return reloadable;
  }


  public void setReloadable(Boolean reloadable) {
    this.reloadable = reloadable;
  }


  public BinDetails panOrToken(String panOrToken) {
    
    this.panOrToken = panOrToken;
    return this;
  }

   /**
   * Get panOrToken
   * @return panOrToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPanOrToken() {
    return panOrToken;
  }


  public void setPanOrToken(String panOrToken) {
    this.panOrToken = panOrToken;
  }


  public BinDetails accountUpdater(Boolean accountUpdater) {
    
    this.accountUpdater = accountUpdater;
    return this;
  }

   /**
   * Get accountUpdater
   * @return accountUpdater
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAccountUpdater() {
    return accountUpdater;
  }


  public void setAccountUpdater(Boolean accountUpdater) {
    this.accountUpdater = accountUpdater;
  }


  public BinDetails alm(Boolean alm) {
    
    this.alm = alm;
    return this;
  }

   /**
   * Get alm
   * @return alm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAlm() {
    return alm;
  }


  public void setAlm(Boolean alm) {
    this.alm = alm;
  }


  public BinDetails domesticOnly(Boolean domesticOnly) {
    
    this.domesticOnly = domesticOnly;
    return this;
  }

   /**
   * Get domesticOnly
   * @return domesticOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDomesticOnly() {
    return domesticOnly;
  }


  public void setDomesticOnly(Boolean domesticOnly) {
    this.domesticOnly = domesticOnly;
  }


  public BinDetails gamblingBlocked(Boolean gamblingBlocked) {
    
    this.gamblingBlocked = gamblingBlocked;
    return this;
  }

   /**
   * Get gamblingBlocked
   * @return gamblingBlocked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getGamblingBlocked() {
    return gamblingBlocked;
  }


  public void setGamblingBlocked(Boolean gamblingBlocked) {
    this.gamblingBlocked = gamblingBlocked;
  }


  public BinDetails level2(Boolean level2) {
    
    this.level2 = level2;
    return this;
  }

   /**
   * Get level2
   * @return level2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLevel2() {
    return level2;
  }


  public void setLevel2(Boolean level2) {
    this.level2 = level2;
  }


  public BinDetails level3(Boolean level3) {
    
    this.level3 = level3;
    return this;
  }

   /**
   * Get level3
   * @return level3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLevel3() {
    return level3;
  }


  public void setLevel3(Boolean level3) {
    this.level3 = level3;
  }


  public BinDetails issuerCurrency(String issuerCurrency) {
    
    this.issuerCurrency = issuerCurrency;
    return this;
  }

   /**
   * Get issuerCurrency
   * @return issuerCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIssuerCurrency() {
    return issuerCurrency;
  }


  public void setIssuerCurrency(String issuerCurrency) {
    this.issuerCurrency = issuerCurrency;
  }


  public BinDetails comboCard(String comboCard) {
    
    this.comboCard = comboCard;
    return this;
  }

   /**
   * Get comboCard
   * @return comboCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComboCard() {
    return comboCard;
  }


  public void setComboCard(String comboCard) {
    this.comboCard = comboCard;
  }


  public BinDetails binLength(Integer binLength) {
    
    this.binLength = binLength;
    return this;
  }

   /**
   * Get binLength
   * @return binLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBinLength() {
    return binLength;
  }


  public void setBinLength(Integer binLength) {
    this.binLength = binLength;
  }


  public BinDetails authentication(Object authentication) {
    
    this.authentication = authentication;
    return this;
  }

   /**
   * Get authentication
   * @return authentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAuthentication() {
    return authentication;
  }


  public void setAuthentication(Object authentication) {
    this.authentication = authentication;
  }


  public BinDetails cost(Object cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCost() {
    return cost;
  }


  public void setCost(Object cost) {
    this.cost = cost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinDetails binDetails = (BinDetails) o;
    return Objects.equals(this.cardBrand, binDetails.cardBrand) &&
        Objects.equals(this.type, binDetails.type) &&
        Objects.equals(this.prepaid, binDetails.prepaid) &&
        Objects.equals(this.cardSegmentType, binDetails.cardSegmentType) &&
        Objects.equals(this.bank, binDetails.bank) &&
        Objects.equals(this.product, binDetails.product) &&
        Objects.equals(this.country, binDetails.country) &&
        Objects.equals(this.reloadable, binDetails.reloadable) &&
        Objects.equals(this.panOrToken, binDetails.panOrToken) &&
        Objects.equals(this.accountUpdater, binDetails.accountUpdater) &&
        Objects.equals(this.alm, binDetails.alm) &&
        Objects.equals(this.domesticOnly, binDetails.domesticOnly) &&
        Objects.equals(this.gamblingBlocked, binDetails.gamblingBlocked) &&
        Objects.equals(this.level2, binDetails.level2) &&
        Objects.equals(this.level3, binDetails.level3) &&
        Objects.equals(this.issuerCurrency, binDetails.issuerCurrency) &&
        Objects.equals(this.comboCard, binDetails.comboCard) &&
        Objects.equals(this.binLength, binDetails.binLength) &&
        Objects.equals(this.authentication, binDetails.authentication) &&
        Objects.equals(this.cost, binDetails.cost);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardBrand, type, prepaid, cardSegmentType, bank, product, country, reloadable, panOrToken, accountUpdater, alm, domesticOnly, gamblingBlocked, level2, level3, issuerCurrency, comboCard, binLength, authentication, cost);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinDetails {\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    prepaid: ").append(toIndentedString(prepaid)).append("\n");
    sb.append("    cardSegmentType: ").append(toIndentedString(cardSegmentType)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    reloadable: ").append(toIndentedString(reloadable)).append("\n");
    sb.append("    panOrToken: ").append(toIndentedString(panOrToken)).append("\n");
    sb.append("    accountUpdater: ").append(toIndentedString(accountUpdater)).append("\n");
    sb.append("    alm: ").append(toIndentedString(alm)).append("\n");
    sb.append("    domesticOnly: ").append(toIndentedString(domesticOnly)).append("\n");
    sb.append("    gamblingBlocked: ").append(toIndentedString(gamblingBlocked)).append("\n");
    sb.append("    level2: ").append(toIndentedString(level2)).append("\n");
    sb.append("    level3: ").append(toIndentedString(level3)).append("\n");
    sb.append("    issuerCurrency: ").append(toIndentedString(issuerCurrency)).append("\n");
    sb.append("    comboCard: ").append(toIndentedString(comboCard)).append("\n");
    sb.append("    binLength: ").append(toIndentedString(binLength)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_brand");
    openapiFields.add("type");
    openapiFields.add("prepaid");
    openapiFields.add("card_segment_type");
    openapiFields.add("bank");
    openapiFields.add("product");
    openapiFields.add("country");
    openapiFields.add("reloadable");
    openapiFields.add("pan_or_token");
    openapiFields.add("account_updater");
    openapiFields.add("alm");
    openapiFields.add("domestic_only");
    openapiFields.add("gambling_blocked");
    openapiFields.add("level2");
    openapiFields.add("level3");
    openapiFields.add("issuer_currency");
    openapiFields.add("combo_card");
    openapiFields.add("bin_length");
    openapiFields.add("authentication");
    openapiFields.add("cost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BinDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BinDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BinDetails is not found in the empty JSON string", BinDetails.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("card_brand") != null && !jsonObj.get("card_brand").isJsonNull()) && !jsonObj.get("card_brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_brand").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("card_segment_type") != null && !jsonObj.get("card_segment_type").isJsonNull()) && !jsonObj.get("card_segment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_segment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_segment_type").toString()));
      }
      // validate the optional field `bank`
      if (jsonObj.get("bank") != null && !jsonObj.get("bank").isJsonNull()) {
        BinDetailsBank.validateJsonObject(jsonObj.getAsJsonObject("bank"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        BinDetailsProduct.validateJsonObject(jsonObj.getAsJsonObject("product"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        BinDetailsCountry.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
      if ((jsonObj.get("pan_or_token") != null && !jsonObj.get("pan_or_token").isJsonNull()) && !jsonObj.get("pan_or_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan_or_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan_or_token").toString()));
      }
      if ((jsonObj.get("issuer_currency") != null && !jsonObj.get("issuer_currency").isJsonNull()) && !jsonObj.get("issuer_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_currency").toString()));
      }
      if ((jsonObj.get("combo_card") != null && !jsonObj.get("combo_card").isJsonNull()) && !jsonObj.get("combo_card").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combo_card` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combo_card").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BinDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BinDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BinDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BinDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BinDetails>() {
           @Override
           public void write(JsonWriter out, BinDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BinDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BinDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BinDetails
  * @throws IOException if the JSON string is invalid with respect to BinDetails
  */
  public static BinDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BinDetails.class);
  }

 /**
  * Convert an instance of BinDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import com.basistheory.ApiException;
import com.basistheory.CreateTenantInvitationRequest;
import com.basistheory.ProblemDetails;
import com.basistheory.Tenant;
import com.basistheory.TenantInvitationResponse;
import com.basistheory.TenantInvitationResponsePaginatedList;
import com.basistheory.TenantInvitationStatus;
import com.basistheory.TenantMemberResponsePaginatedList;
import com.basistheory.TenantUsageReport;
import java.util.UUID;
import com.basistheory.UpdateTenantRequest;
import com.basistheory.ValidationProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantsApi
 */
@Disabled
public class TenantsApiTest {

    private final TenantsApi api = new TenantsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvitationTest() throws ApiException {
        CreateTenantInvitationRequest createTenantInvitationRequest = null;
        TenantInvitationResponse response = api.createInvitation(createTenantInvitationRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        api.delete();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInvitationTest() throws ApiException {
        UUID invitationId = null;
        api.deleteInvitation(invitationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        UUID memberId = null;
        api.deleteMember(memberId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        Tenant response = api.get();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvitationsTest() throws ApiException {
        TenantInvitationStatus status = null;
        Integer page = null;
        Integer size = null;
        TenantInvitationResponsePaginatedList response = api.getInvitations(status, page, size);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersTest() throws ApiException {
        List<UUID> userId = null;
        Integer page = null;
        Integer size = null;
        TenantMemberResponsePaginatedList response = api.getMembers(userId, page, size);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantOperationReportTest() throws ApiException {
        TenantUsageReport response = api.getTenantOperationReport();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantUsageReportTest() throws ApiException {
        TenantUsageReport response = api.getTenantUsageReport();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendInvitationTest() throws ApiException {
        UUID invitationId = null;
        TenantInvitationResponse response = api.resendInvitation(invitationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UpdateTenantRequest updateTenantRequest = null;
        Tenant response = api.update(updateTenantRequest);
        // TODO: test validations
    }

}

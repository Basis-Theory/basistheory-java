/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import com.basistheory.ApiException;
import com.basistheory.CreateTokenRequest;
import com.basistheory.CreateTokenResponse;
import com.basistheory.ProblemDetails;
import com.basistheory.SearchTokensRequest;
import com.basistheory.Token;
import com.basistheory.TokenPaginatedList;
import com.basistheory.UpdateTokenRequest;
import com.basistheory.ValidationProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokensApi
 */
@Disabled
public class TokensApiTest {

    private final TokensApi api = new TokensApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        CreateTokenRequest createTokenRequest = null;
        CreateTokenResponse response = api.create(createTokenRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssociationTest() throws ApiException {
        String parentId = null;
        String childId = null;
        api.createAssociation(parentId, childId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChildTest() throws ApiException {
        String parentId = null;
        CreateTokenRequest createTokenRequest = null;
        CreateTokenResponse response = api.createChild(parentId, createTokenRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String id = null;
        api.delete(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssociationTest() throws ApiException {
        String parentId = null;
        String childId = null;
        api.deleteAssociation(parentId, childId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        List<String> type = null;
        List<String> id = null;
        Map<String, String> metadata = null;
        Integer page = null;
        Integer size = null;
        TokenPaginatedList response = api.get(type, id, metadata, page, size);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        Token response = api.getById(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildrenTest() throws ApiException {
        String parentId = null;
        List<String> type = null;
        List<String> id = null;
        Map<String, String> metadata = null;
        Integer page = null;
        Integer size = null;
        TokenPaginatedList response = api.getChildren(parentId, type, id, metadata, page, size);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        SearchTokensRequest searchTokensRequest = null;
        TokenPaginatedList response = api.search(searchTokensRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String id = null;
        UpdateTokenRequest updateTokenRequest = null;
        Token response = api.update(id, updateTokenRequest);
        // TODO: test validations
    }

}

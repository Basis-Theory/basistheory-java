/*
 * Basis Theory API
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.basistheory;

import com.basistheory.ApiException;
import com.basistheory.CreateReactorRequest;
import com.basistheory.ProblemDetails;
import com.basistheory.ReactRequest;
import com.basistheory.ReactResponse;
import com.basistheory.Reactor;
import com.basistheory.ReactorPaginatedList;
import java.util.UUID;
import com.basistheory.UpdateReactorRequest;
import com.basistheory.ValidationProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReactorsApi
 */
@Disabled
public class ReactorsApiTest {

    private final ReactorsApi api = new ReactorsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        CreateReactorRequest createReactorRequest = null;
        Reactor response = api.create(createReactorRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        UUID id = null;
        api.delete(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        List<UUID> id = null;
        String name = null;
        Integer page = null;
        Integer size = null;
        ReactorPaginatedList response = api.get(id, name, page, size);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        UUID id = null;
        Reactor response = api.getById(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactTest() throws ApiException {
        UUID id = null;
        ReactRequest reactRequest = null;
        ReactResponse response = api.react(id, reactRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UUID id = null;
        UpdateReactorRequest updateReactorRequest = null;
        Reactor response = api.update(id, updateReactorRequest);
        // TODO: test validations
    }

}
